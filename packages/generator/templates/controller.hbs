package {{ package }}.web;

import {{ package }}.domain.{{ pascalName }};
import {{ package }}.service.{{ pascalName }}Service;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.data.domain.Page;

import jakarta.validation.Valid;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/{{ collection }}")
public class {{ pascalName }}Controller {

    private final {{ pascalName }}Service service;

    public {{ pascalName }}Controller({{ pascalName }}Service service) {
        this.service = service;
    }

    @GetMapping
    public List<{{ pascalName }}> list() {
        return service.list();
    }

    @GetMapping("/page")
    public Page<{{ pascalName }}> page(@RequestParam(value = "page", required = false) Integer page,
                                       @RequestParam(value = "size", required = false) Integer size,
                                       @RequestParam(value = "sort", required = false) String sort) {
        return service.page(page, size, sort);
    }

    @GetMapping("/search")
    public Page<{{ pascalName }}> search(@RequestParam(value = "q", required = false) String q,
                                         @RequestParam(value = "page", required = false) Integer page,
                                         @RequestParam(value = "size", required = false) Integer size,
                                         @RequestParam(value = "sort", required = false) String sort) {
        return service.search(q, page, size, sort);
    }

    @GetMapping("/{id}")
    public {{ pascalName }} get(@PathVariable UUID id) {
        return service.get(id);
    }

    @PostMapping
    public {{ pascalName }} create(@Valid @RequestBody {{ pascalName }} request) {
        return service.create(request);
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(@PathVariable UUID id) {
        service.delete(id);
    }
}
